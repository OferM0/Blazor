@page "/products"
@using BlazorPagination.Shared
@inject HttpClient HttpClient

<h1>Product List</h1>

@if (products == null)
{
    <p>Loading...</p>
}
else if (products.Count == 0)
{
    <p>No products found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between">
        <button class="btn btn-primary" disabled="@IsFirstPage" @onclick="()=>GetProducts(currentPage - 1)">Previous</button>
        <span class="mt-2">Page @currentPage of @totalPages</span>
        <button class="btn btn-primary" disabled="@IsLastPage" @onclick="()=>GetProducts(currentPage + 1)">Next</button>
    </div>
}

@code {
    private List<Product> products = new ();
    private int currentPage = 1;
    private int totalPages = 1;

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage >= totalPages;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts(currentPage);
    }

    private async Task GetProducts(int page)
    {
        var response = await HttpClient.GetFromJsonAsync<ProductResponse>($"api/product/{page}");
        if (response != null)
        {
            products = response.Products;
            currentPage = response.CurrentPage;
            totalPages = response.Pages;
            //StateHasChanged(); // This will tell Blazor to update the UI
        }
    }
}
